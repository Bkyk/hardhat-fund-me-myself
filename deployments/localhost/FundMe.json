{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getpriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getsAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6d6c7af2d205b9d938ff78ca21e9f6fb2a6b5da7177a3b3e1b0a18e77efec049",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1059516",
    "logsBloom": "0x
    "blockHash": "0x7db1f4bbf7ed340ff42b4feaaef501977f1075f17421b08555ccd937c6a9636a",
    "transactionHash": "0x6d6c7af2d205b9d938ff78ca21e9f6fb2a6b5da7177a3b3e1b0a18e77efec049",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1059516",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "99321d429628ffb9905528997c43801b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getpriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getsAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Jessica\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor receive fallback external public internal private view / pure\"},\"fund()\":{\"notice\":\"This function funds this contract\"},\"getOwner()\":{\"notice\":\"view / pure\"}},\"notice\":\"This contract is to demo a sample funding  contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.7;\\n\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error Codes\\nerror FundMe__NotOwner();\\n\\n// Inerfaces, Libraries, Contracts\\n\\n// we can put comment here\\n/**\\n * @title A contract for crowd funding\\n * @author Jessica\\n * @notice This contract is to demo a sample funding  contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    \\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Function Order:\\n    /// constructor\\n    /// receive\\n    /// fallback\\n    /// external\\n    /// public\\n    /// internal\\n    /// private\\n    /// view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n     /// view / pure\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n    function getsAddressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n    function getpriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n\\n}\",\"keccak256\":\"0x23cb58f698954d468372d38803d4e4c2b5750007bf454292ba36cc60d2c80363\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n       \\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n        // or (Both will do the same thing)\\r\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // or (Both will do the same thing)\\r\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x782db4162835156d5c764a3bde9ddda547c4c77cef1522fb88d236e790aaa7a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200135138038062001351833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111cb62000186600039600081816103d40152818161062301528181610649015261083f01526111cb6000f3fe6080604052600436106100895760003560e01c80636b69a592116100595780636b69a5921461014c578063893d20e814610177578063b60d4288146101a2578063be2693f0146101ac578063d7b4750c146101c357610098565b80629196d7146100a25780630ec3b027146100cd5780631e37bcca146100f85780633ccfd60b1461013557610098565b3661009857610096610200565b005b6100a0610200565b005b3480156100ae57600080fd5b506100b761033a565b6040516100c49190610b1f565b60405180910390f35b3480156100d957600080fd5b506100e2610364565b6040516100ef9190610b1f565b60405180910390f35b34801561010457600080fd5b5061011f600480360381019061011a9190610b7d565b61038a565b60405161012c9190610bc3565b60405180910390f35b34801561014157600080fd5b5061014a6103d2565b005b34801561015857600080fd5b50610161610612565b60405161016e9190610bc3565b60405180910390f35b34801561018357600080fd5b5061018c61061f565b6040516101999190610bed565b60405180910390f35b6101aa610200565b005b3480156101b857600080fd5b506101c1610647565b005b3480156101cf57600080fd5b506101ea60048036038101906101e59190610c34565b6108d5565b6040516101f79190610bed565b60405180910390f35b6802b5e3af16b188000061023f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091d90919063ffffffff16565b1015610280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027790610cbe565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ce9190610d0d565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610457576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105025760006001828154811061047d5761047c610d63565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104fa90610d92565b91505061045a565b50600067ffffffffffffffff81111561051e5761051d610ddb565b5b60405190808252806020026020018201604052801561054c5781602001602082028036833780820191505090505b50600190805190602001906105629291906109f9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058990610e3b565b60006040518083038185875af1925050503d80600081146105c6576040519150601f19603f3d011682016040523d82523d6000602084013e6105cb565b606091505b505090508061060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690610e9c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610706575b5050505050905060005b81518110156107da57600082828151811061077857610777610d63565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d290610d92565b91505061075a565b50600067ffffffffffffffff8111156107f6576107f5610ddb565b5b6040519080825280602002602001820160405280156108245781602001602082028036833780820191505090505b506001908051906020019061083a9291906109f9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088190610e3b565b60006040518083038185875af1925050503d80600081146108be576040519150601f19603f3d011682016040523d82523d6000602084013e6108c3565b606091505b50509050806108d157600080fd5b5050565b6000600182815481106108eb576108ea610d63565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092983610959565b90506000670de0b6b3a764000085836109429190610ebc565b61094c9190610f45565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190611003565b5050509150506402540be400816109f1919061107e565b915050919050565b828054828255906000526020600020908101928215610a72579160200282015b82811115610a715782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a19565b5b509050610a7f9190610a83565b5090565b5b80821115610a9c576000816000905550600101610a84565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ae5610ae0610adb84610aa0565b610ac0565b610aa0565b9050919050565b6000610af782610aca565b9050919050565b6000610b0982610aec565b9050919050565b610b1981610afe565b82525050565b6000602082019050610b346000830184610b10565b92915050565b600080fd5b6000610b4a82610aa0565b9050919050565b610b5a81610b3f565b8114610b6557600080fd5b50565b600081359050610b7781610b51565b92915050565b600060208284031215610b9357610b92610b3a565b5b6000610ba184828501610b68565b91505092915050565b6000819050919050565b610bbd81610baa565b82525050565b6000602082019050610bd86000830184610bb4565b92915050565b610be781610b3f565b82525050565b6000602082019050610c026000830184610bde565b92915050565b610c1181610baa565b8114610c1c57600080fd5b50565b600081359050610c2e81610c08565b92915050565b600060208284031215610c4a57610c49610b3a565b5b6000610c5884828501610c1f565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ca8601b83610c61565b9150610cb382610c72565b602082019050919050565b60006020820190508181036000830152610cd781610c9b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d1882610baa565b9150610d2383610baa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5857610d57610cde565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9d82610baa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd057610dcf610cde565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e25600083610e0a565b9150610e3082610e15565b600082019050919050565b6000610e4682610e18565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e86600b83610c61565b9150610e9182610e50565b602082019050919050565b60006020820190508181036000830152610eb581610e79565b9050919050565b6000610ec782610baa565b9150610ed283610baa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0b57610f0a610cde565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5082610baa565b9150610f5b83610baa565b925082610f6b57610f6a610f16565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f9581610f76565b8114610fa057600080fd5b50565b600081519050610fb281610f8c565b92915050565b6000819050919050565b610fcb81610fb8565b8114610fd657600080fd5b50565b600081519050610fe881610fc2565b92915050565b600081519050610ffd81610c08565b92915050565b600080600080600060a0868803121561101f5761101e610b3a565b5b600061102d88828901610fa3565b955050602061103e88828901610fd9565b945050604061104f88828901610fee565b935050606061106088828901610fee565b925050608061107188828901610fa3565b9150509295509295909350565b600061108982610fb8565b915061109483610fb8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110d3576110d2610cde565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111105761110f610cde565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114d5761114c610cde565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118a57611189610cde565b5b82820290509291505056fea26469706673582212206c9f0e13b673368c6092b42161f40d25536688395e30b02e9298bf4b429ff3ce64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100895760003560e01c80636b69a592116100595780636b69a5921461014c578063893d20e814610177578063b60d4288146101a2578063be2693f0146101ac578063d7b4750c146101c357610098565b80629196d7146100a25780630ec3b027146100cd5780631e37bcca146100f85780633ccfd60b1461013557610098565b3661009857610096610200565b005b6100a0610200565b005b3480156100ae57600080fd5b506100b761033a565b6040516100c49190610b1f565b60405180910390f35b3480156100d957600080fd5b506100e2610364565b6040516100ef9190610b1f565b60405180910390f35b34801561010457600080fd5b5061011f600480360381019061011a9190610b7d565b61038a565b60405161012c9190610bc3565b60405180910390f35b34801561014157600080fd5b5061014a6103d2565b005b34801561015857600080fd5b50610161610612565b60405161016e9190610bc3565b60405180910390f35b34801561018357600080fd5b5061018c61061f565b6040516101999190610bed565b60405180910390f35b6101aa610200565b005b3480156101b857600080fd5b506101c1610647565b005b3480156101cf57600080fd5b506101ea60048036038101906101e59190610c34565b6108d5565b6040516101f79190610bed565b60405180910390f35b6802b5e3af16b188000061023f600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461091d90919063ffffffff16565b1015610280576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027790610cbe565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ce9190610d0d565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610457576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105025760006001828154811061047d5761047c610d63565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104fa90610d92565b91505061045a565b50600067ffffffffffffffff81111561051e5761051d610ddb565b5b60405190808252806020026020018201604052801561054c5781602001602082028036833780820191505090505b50600190805190602001906105629291906109f9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058990610e3b565b60006040518083038185875af1925050503d80600081146105c6576040519150601f19603f3d011682016040523d82523d6000602084013e6105cb565b606091505b505090508061060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060690610e9c565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106cc576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561075057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610706575b5050505050905060005b81518110156107da57600082828151811061077857610777610d63565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107d290610d92565b91505061075a565b50600067ffffffffffffffff8111156107f6576107f5610ddb565b5b6040519080825280602002602001820160405280156108245781602001602082028036833780820191505090505b506001908051906020019061083a9291906109f9565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161088190610e3b565b60006040518083038185875af1925050503d80600081146108be576040519150601f19603f3d011682016040523d82523d6000602084013e6108c3565b606091505b50509050806108d157600080fd5b5050565b6000600182815481106108eb576108ea610d63565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061092983610959565b90506000670de0b6b3a764000085836109429190610ebc565b61094c9190610f45565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109a257600080fd5b505afa1580156109b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109da9190611003565b5050509150506402540be400816109f1919061107e565b915050919050565b828054828255906000526020600020908101928215610a72579160200282015b82811115610a715782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a19565b5b509050610a7f9190610a83565b5090565b5b80821115610a9c576000816000905550600101610a84565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ae5610ae0610adb84610aa0565b610ac0565b610aa0565b9050919050565b6000610af782610aca565b9050919050565b6000610b0982610aec565b9050919050565b610b1981610afe565b82525050565b6000602082019050610b346000830184610b10565b92915050565b600080fd5b6000610b4a82610aa0565b9050919050565b610b5a81610b3f565b8114610b6557600080fd5b50565b600081359050610b7781610b51565b92915050565b600060208284031215610b9357610b92610b3a565b5b6000610ba184828501610b68565b91505092915050565b6000819050919050565b610bbd81610baa565b82525050565b6000602082019050610bd86000830184610bb4565b92915050565b610be781610b3f565b82525050565b6000602082019050610c026000830184610bde565b92915050565b610c1181610baa565b8114610c1c57600080fd5b50565b600081359050610c2e81610c08565b92915050565b600060208284031215610c4a57610c49610b3a565b5b6000610c5884828501610c1f565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ca8601b83610c61565b9150610cb382610c72565b602082019050919050565b60006020820190508181036000830152610cd781610c9b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d1882610baa565b9150610d2383610baa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d5857610d57610cde565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d9d82610baa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dd057610dcf610cde565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e25600083610e0a565b9150610e3082610e15565b600082019050919050565b6000610e4682610e18565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e86600b83610c61565b9150610e9182610e50565b602082019050919050565b60006020820190508181036000830152610eb581610e79565b9050919050565b6000610ec782610baa565b9150610ed283610baa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f0b57610f0a610cde565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5082610baa565b9150610f5b83610baa565b925082610f6b57610f6a610f16565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f9581610f76565b8114610fa057600080fd5b50565b600081519050610fb281610f8c565b92915050565b6000819050919050565b610fcb81610fb8565b8114610fd657600080fd5b50565b600081519050610fe881610fc2565b92915050565b600081519050610ffd81610c08565b92915050565b600080600080600060a0868803121561101f5761101e610b3a565b5b600061102d88828901610fa3565b955050602061103e88828901610fd9565b945050604061104f88828901610fee565b935050606061106088828901610fee565b925050608061107188828901610fa3565b9150509295509295909350565b600061108982610fb8565b915061109483610fb8565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110d3576110d2610cde565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111105761110f610cde565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561114d5761114c610cde565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561118a57611189610cde565b5b82820290509291505056fea26469706673582212206c9f0e13b673368c6092b42161f40d25536688395e30b02e9298bf4b429ff3ce64736f6c63430008080033",
  "devdoc": {
    "author": "Jessica",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor receive fallback external public internal private view / pure"
      },
      "fund()": {
        "notice": "This function funds this contract"
      },
      "getOwner()": {
        "notice": "view / pure"
      }
    },
    "notice": "This contract is to demo a sample funding  contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
